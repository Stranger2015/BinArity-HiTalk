plugins {
    id 'java'
 //   id 'java-gradle-plugin'
//    id 'antlr'
    
}

group 'hitalk'
version

//https://github.com/antlr/intellij-plugin-v4

//targetCompatibility = 1.8
//sourceCompatibility = 1.8
apply plugin: 'java'
//apply plugin: 'antlr'
apply plugin: 'idea'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.12'
//    antlr "org.antlr:antlr4:4.7.1" // use ANTLR version 4
}

    def versionPropsFile = file('src/org/ltc/hitalk/wam/compiler/version.properties')
    def versionBuild

    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['version.build'].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }


    /*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
    ext.autoIncrementBuildNumber = {

        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps['version.build'].toInteger() + 1
            versionProps['version.build'] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }

//
//task incrementVersion<<{
//    String minor=version.substring(version.lastIndexOf('.')+1)
//    int m=minor.toInteger()+1
//    String major=version.substring(0,version.length()-1)
//    String s=buildFile.getText().replaceFirst("version='$version'","version='"+major+m+"'")
//    buildFile.setText(s)
//}
//    defaultConfig {
//        minSdkVersion 16
//        targetSdkVersion 21
//        versionCode 1
      def  versionName ="0.1.0." + versionBuild
//    }

//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }

    // Hook to check if the release/debug task is among the tasks to be executed.
    //Let's make use of it
    gradle.taskGraph.whenReady {taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) {  /* when run debug task */
            autoIncrementBuildNumber()
        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            autoIncrementBuildNumber()
        }
    }

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'com.android.support:appcompat-v7:25.3.1'
}
//task incVersion {
//    ext {
//        versionFile = file('src/main/org/ltc/hitalk/wam/compiler/version.txt')
//    }
////    doLast {
//        if (versionFile.canRead()) {
//            String versionNumber
//            // Assuming version is only ever on the first line.
//            // (did this to make sure blank lines aren't accumulated, could strip them some other way if you want)
//            versionFile.withReader { reader ->
//                versionNumber = reader.readLine()
//            }
//            def (major, minor, patch,build) = versionNumber.tokenize('.')
//            println major + "|" + minor + "|" + patch+ "|"+build
//            def temp =build.toInteger() + 1
//            versionNumber = "${temp}.${minor}.${patch}.${build}"
//            println versionNumber
//            versionFile.withWriter { writer ->
//                writer.println versionNumber
//            }
//        } else {
//            throw new GradleException('Can not read file.')
//        }