package org.ltc.hitalk.parser.handlers;

import org.ltc.hitalk.parser.Directive.DirectiveKind;
import org.ltc.hitalk.parser.HtPrologParser;
import org.ltc.hitalk.parser.IStateHandler;
import org.ltc.hitalk.parser.ParserState;
import org.ltc.hitalk.parser.PlToken;
import org.ltc.hitalk.term.ITerm;
import org.ltc.hitalk.term.OpSymbolFunctor.Associativity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.EnumSet;
import java.util.function.Function;

///*****************************************************************
// * query ::=
// *    exprAn(1200)
// * ---------------------------------------------------------------
// * exprAn(n) ::=
// +    n > 0
// *    exprB(n)
// *    {
//          op(yfx,n) exprA(n-1) | op(yf,n)
//      }*
// * ============================
// * exprB(n) ::=
// *    exprC(n-1)
// *    {
//        op(xfx,n) -> exprAn(n-1) |
// *      op(xfy,n) -> exprAn(n) |
// *      op(xf,n)  -> true
//      }*
// * // exprC is called parseLeftSide in the code
// * ============================
// * exprC(n) ::=
// *    '-' integer | '-' float |
// *    op( fx, n ) -> exprAn(n-1) |
// *    op( hx, n ) -> exprAn(n-1) |
// *    op( fy, n ) -> exprAn(n) |
// *    op( hy, n ) -> exprAn(n) |
// *    true        -> exprAn(n)
// * ============================
// * expr_A(0) ::=
// *    integer |
// *    float |
// *    atom |
// *    variable |
// *    list     |
// *    functor
// * ============================
// * functor ::=
// *    functorName
// *    args
// * ============================
// * functorName ::=
// *    expr_A0
// * ============================
// * args ::=
// *    '(' list_seq ')'
// * ============================
// * list ::=
// *    '[' list_seq ']'
// * ===========================
// * block ::=
// *    '('  simple_seq ')'
// * ============================
// * bypass_blk ::=
// *    '{' simple_seq '}'
// *    //'{' { exprAn(1200) "," }* '}'
// *    //'{' [ exprAn(1200) [","] ] bypass_blk '}'
// * ============================
// * op(type,n) ::=
// *    atom | { symbol }+
// * ============================
// * list_seq ::=
// *    [ heads tail ]
// * ============================
//   simple_seq ::=
//      [ exprAn(1200) [ "," ]] simple_seq
//===============================
//   heads ::=
//      simple_seq
// ===========================================
//   tail ::=
//       "|" list | variable
// ===========================================
public
class ParserStateHandler implements IStateHandler {
    protected final Logger logger = LoggerFactory.getLogger(getClass().getSimpleName());
    protected final HtPrologParser parser;

    protected ParserState state;
    protected final Function<Integer, ITerm> action;
    protected EnumSet<Associativity> assocs;
    protected EnumSet<DirectiveKind> dks;
    protected int currPriority;
    protected PlToken token;

    //    protected ITermFactory termFactory = appContext.getTermFactory();
    protected boolean isPushed;

//    @SuppressWarnings("JavaReflectionInvocation")
//    public static IStateHandler create(Class<?> handler, Object... params) {
//        final IStateHandler result;
//        try {
//            result = (IStateHandler) handler.getConstructor().newInstance(params);
//        } catch (ReflectiveOperationException e) {
//            throw new ExecutionError();
//        }
//        result.push(result);
//        return result;
//    }

//    public static IStateHandler create(StateRecord sr) {
//        return create(sr.getParserState().getRuleClass(),
//                sr.getParserState(),
//                sr.getAssocs(),
//                sr.getDks(),
//                sr.getCurrPriority(),
//                sr.getToken());
//    }

    public ParserStateHandler(HtPrologParser parser,
                              Function<Integer , ITerm> action,
                              EnumSet<Associativity> assocs,
                              EnumSet<DirectiveKind> dks,
                              int currPriority,
                              PlToken token) {

        this.parser = parser;
        this.action = action;
        this.assocs = assocs;
        this.dks = dks;
        this.currPriority = currPriority;
        this.token = token;
    }

    @Override
    public void setCurrPriority(int currPriority) {
        this.currPriority = currPriority;
    }

    @Override
    public void setToken(PlToken token) {
        this.token = token;
    }

    @Override
    public void setDks(EnumSet<DirectiveKind> dks) {
        this.dks = dks;
    }

    /**
     * @return
     */
    public int getCurrPriority() {
        return currPriority;
    }

    /**
     * @return
     */
    public EnumSet<DirectiveKind> getDks() {
        return dks;
    }

    /**
     * @return
     */
    public PlToken getToken() {
        return token;
    }

    @Override
    public ParserState getState() {
        return state;
    }

    /**
     * @return
     */
    public HtPrologParser getParser() {
        return parser;
    }

    /**
     * @param handler
     */
    public final void push(IStateHandler handler) {
        parser.states.push(handler);
        isPushed = true;
    }

    /**
     * @return
     */
    public final IStateHandler pop() {
        return parser.states.pop();
    }

    /**
     * @return
     */
    @Override
    public EnumSet<Associativity> getAssocs() {
        return assocs;
    }


    public void setHandler(IStateHandler handler) {
        parser.setHandler(handler);
    }

    /**
     * @return
     */
    @Override
    public boolean isPushed() {
        return isPushed;
    }
}