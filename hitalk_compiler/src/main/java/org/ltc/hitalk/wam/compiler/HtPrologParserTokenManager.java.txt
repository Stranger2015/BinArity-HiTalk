/* Generated By:JavaCC: Do not edit this line. HtPrologParserTokenManager.java */
package org.ltc.hitalk.wam.compiler;


import com.thesett.aima.logic.fol.isoprologparser.SimpleCharStream;
import org.ltc.hitalk.parser.HtPrologParserConstants;

public class HtPrologParserTokenManager implements HtPrologParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream ( java.io.PrintStream ds ) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0 ( int pos, long active0 ) {
        switch (pos) {
            case 0:
                if ((active0 & 0x4000L) != 0L) return 72;
                if ((active0 & 0x40L) != 0L) {
                    jjmatchedKind = 27;
                    return 73;
                }
                if ((active0 & 0x8000L) != 0L) return 4;
                if ((active0 & 0x1000L) != 0L) return 60;
                if ((active0 & 0x200L) != 0L) return 73;
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0 ( int pos, long active0 ) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private final int jjStopAtPos ( int pos, int kind ) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0 ( int pos, int kind, int state ) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0 () {
        switch (curChar) {
            case 34:
                return jjStartNfaWithStates_0(0, 14, 72);
            case 39:
                return jjStartNfaWithStates_0(0, 15, 4);
            case 40:
                return jjStopAtPos(0, 10);
            case 41:
                return jjStopAtPos(0, 11);
            case 46:
                return jjStartNfaWithStates_0(0, 9, 73);
            case 47:
                return jjMoveStringLiteralDfa1_0(0x40L);
            case 91:
                return jjStartNfaWithStates_0(0, 12, 60);
            case 93:
                return jjStopAtPos(0, 13);
            case 124:
                return jjStopAtPos(0, 16);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0 ( long active0 ) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active0 & 0x40L) != 0L) return jjStartNfaWithStates_0(1, 6, 73);
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private final void jjCheckNAdd ( int state ) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates ( int start, int end ) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates ( int state1, int state2 ) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates ( int start, int end ) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates ( int start ) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};

    private final int jjMoveNfa_0 ( int startState, int curPos ) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 72;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 4:
                            if ((0xffffff7fffffdbffL & l) != 0L) jjCheckNAdd(5);
                            break;
                        case 73:
                            if ((0xfc00ec0200000000L & l) != 0L) {
                                if (kind > 27) kind = 27;
                                jjCheckNAdd(54);
                            } else if (curChar == 40) {
                                if (kind > 26) kind = 26;
                            }
                            if ((0xfc00ec0200000000L & l) != 0L) jjCheckNAddTwoStates(53, 50);
                            break;
                        case 72:
                            if ((0xfffffffbffffdbffL & l) != 0L) jjCheckNAddStates(0, 3);
                            else if (curChar == 34) {
                                if (kind > 24) kind = 24;
                            }
                            break;
                        case 0:
                            if ((0xfc00ec0200000000L & l) != 0L) {
                                if (kind > 27) kind = 27;
                                jjCheckNAddStates(4, 6);
                            } else if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 17) kind = 17;
                                jjCheckNAddStates(7, 11);
                            } else if (curChar == 44) {
                                if (kind > 27) kind = 27;
                            } else if (curChar == 34) jjCheckNAddStates(0, 3);
                            else if (curChar == 39) jjAddStates(12, 14);
                            if (curChar == 48) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 2:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 17) kind = 17;
                            jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 3:
                            if (curChar == 39) jjAddStates(12, 14);
                            break;
                        case 5:
                            if (curChar == 39 && kind > 23) kind = 23;
                            break;
                        case 7:
                            if ((0x8400000000L & l) != 0L) jjCheckNAdd(5);
                            break;
                        case 8:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddTwoStates(9, 5);
                            break;
                        case 9:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(5);
                            break;
                        case 10:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 11;
                            break;
                        case 11:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(9);
                            break;
                        case 13:
                            if ((0x3ff000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 14:
                            if ((0x3ff000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 16;
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) != 0L) jjCheckNAdd(5);
                            break;
                        case 18:
                            if (curChar == 34) jjCheckNAddStates(0, 3);
                            break;
                        case 19:
                            if ((0xfffffffbffffdbffL & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 21:
                            if ((0x8400000000L & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 23:
                            if ((0x3ff000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        case 24:
                            if ((0x3ff000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 26;
                            break;
                        case 26:
                            if ((0x3ff000000000000L & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 28:
                            if (curChar == 34 && kind > 24) kind = 24;
                            break;
                        case 29:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(15, 19);
                            break;
                        case 30:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 31:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 32;
                            break;
                        case 32:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(30);
                            break;
                        case 34:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 25) kind = 25;
                            jjstateSet[jjnewStateCnt++] = 34;
                            break;
                        case 35:
                            if (curChar == 44 && kind > 27) kind = 27;
                            break;
                        case 36:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 17) kind = 17;
                            jjCheckNAddStates(7, 11);
                            break;
                        case 37:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 17) kind = 17;
                            jjCheckNAdd(37);
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(38, 39);
                            break;
                        case 39:
                            if (curChar == 46) jjCheckNAdd(40);
                            break;
                        case 40:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 20) kind = 20;
                            jjCheckNAddTwoStates(40, 41);
                            break;
                        case 42:
                            if ((0x280000000000L & l) != 0L) jjCheckNAdd(43);
                            break;
                        case 43:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 20) kind = 20;
                            jjCheckNAdd(43);
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 20) kind = 20;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 46:
                            if ((0x280000000000L & l) != 0L) jjCheckNAdd(47);
                            break;
                        case 47:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 20) kind = 20;
                            jjCheckNAdd(47);
                            break;
                        case 49:
                            if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(49, 50);
                            break;
                        case 50:
                            if (curChar == 40 && kind > 26) kind = 26;
                            break;
                        case 51:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjstateSet[jjnewStateCnt++] = 51;
                            break;
                        case 52:
                            if ((0xfc00ec0200000000L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjCheckNAddStates(4, 6);
                            break;
                        case 53:
                            if ((0xfc00ec0200000000L & l) != 0L) jjCheckNAddTwoStates(53, 50);
                            break;
                        case 54:
                            if ((0xfc00ec0200000000L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjCheckNAdd(54);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 60:
                            if (curChar == 117) jjstateSet[jjnewStateCnt++] = 70;
                            else if (curChar == 116) jjstateSet[jjnewStateCnt++] = 65;
                            else if (curChar == 105) jjstateSet[jjnewStateCnt++] = 59;
                            break;
                        case 4:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAdd(5);
                            else if (curChar == 92) jjstateSet[jjnewStateCnt++] = 12;
                            if (curChar == 92) jjAddStates(20, 22);
                            break;
                        case 73:
                            if ((0x50000001L & l) != 0L) {
                                if (kind > 27) kind = 27;
                                jjCheckNAdd(54);
                            }
                            if ((0x50000001L & l) != 0L) jjCheckNAddTwoStates(53, 50);
                            break;
                        case 72:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(0, 3);
                            else if (curChar == 92) jjstateSet[jjnewStateCnt++] = 22;
                            if (curChar == 92) jjAddStates(23, 25);
                            break;
                        case 0:
                            if ((0x87fffffeL & l) != 0L) {
                                if (kind > 25) kind = 25;
                                jjCheckNAdd(34);
                            } else if ((0x7fffffe00000000L & l) != 0L) {
                                if (kind > 27) kind = 27;
                                jjCheckNAddStates(26, 28);
                            } else if ((0x50000001L & l) != 0L) {
                                if (kind > 27) kind = 27;
                                jjCheckNAddStates(4, 6);
                            } else if (curChar == 91) jjAddStates(29, 31);
                            break;
                        case 1:
                            if ((0x100000001000000L & l) != 0L) jjCheckNAdd(2);
                            break;
                        case 2:
                            if ((0x7e0000007eL & l) == 0L) break;
                            if (kind > 17) kind = 17;
                            jjCheckNAdd(2);
                            break;
                        case 6:
                            if (curChar == 92) jjAddStates(20, 22);
                            break;
                        case 7:
                            if ((0x14404410000000L & l) != 0L) jjCheckNAdd(5);
                            break;
                        case 12:
                            if (curChar == 117) jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 13:
                            if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 14:
                            if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 15:
                            if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++] = 16;
                            break;
                        case 16:
                            if ((0x7e0000007eL & l) != 0L) jjCheckNAdd(5);
                            break;
                        case 17:
                            if (curChar == 92) jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 19:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 20:
                            if (curChar == 92) jjAddStates(23, 25);
                            break;
                        case 21:
                            if ((0x14404410000000L & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 22:
                            if (curChar == 117) jjstateSet[jjnewStateCnt++] = 23;
                            break;
                        case 23:
                            if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        case 24:
                            if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 25:
                            if ((0x7e0000007eL & l) != 0L) jjstateSet[jjnewStateCnt++] = 26;
                            break;
                        case 26:
                            if ((0x7e0000007eL & l) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        case 27:
                            if (curChar == 92) jjstateSet[jjnewStateCnt++] = 22;
                            break;
                        case 33:
                            if ((0x87fffffeL & l) == 0L) break;
                            if (kind > 25) kind = 25;
                            jjCheckNAdd(34);
                            break;
                        case 34:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 25) kind = 25;
                            jjCheckNAdd(34);
                            break;
                        case 41:
                            if ((0x2000000020L & l) != 0L) jjAddStates(32, 33);
                            break;
                        case 45:
                            if ((0x2000000020L & l) != 0L) jjAddStates(34, 35);
                            break;
                        case 48:
                            if ((0x7fffffe00000000L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjCheckNAddStates(26, 28);
                            break;
                        case 49:
                            if ((0x7fffffe87fffffeL & l) != 0L) jjCheckNAddTwoStates(49, 50);
                            break;
                        case 51:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjCheckNAdd(51);
                            break;
                        case 52:
                            if ((0x50000001L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjCheckNAddStates(4, 6);
                            break;
                        case 53:
                            if ((0x50000001L & l) != 0L) jjCheckNAddTwoStates(53, 50);
                            break;
                        case 54:
                            if ((0x50000001L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            jjCheckNAdd(54);
                            break;
                        case 55:
                            if (curChar == 91) jjAddStates(29, 31);
                            break;
                        case 56:
                            if (curChar == 111) jjstateSet[jjnewStateCnt++] = 57;
                            break;
                        case 57:
                            if (curChar == 93 && kind > 35) kind = 35;
                            break;
                        case 58:
                            if (curChar == 102) jjstateSet[jjnewStateCnt++] = 56;
                            break;
                        case 59:
                            if (curChar == 110) jjstateSet[jjnewStateCnt++] = 58;
                            break;
                        case 61:
                            if (curChar == 101) jjstateSet[jjnewStateCnt++] = 62;
                            break;
                        case 62:
                            if (curChar == 93 && kind > 36) kind = 36;
                            break;
                        case 63:
                            if (curChar == 99) jjstateSet[jjnewStateCnt++] = 61;
                            break;
                        case 64:
                            if (curChar == 97) jjstateSet[jjnewStateCnt++] = 63;
                            break;
                        case 65:
                            if (curChar == 114) jjstateSet[jjnewStateCnt++] = 64;
                            break;
                        case 66:
                            if (curChar == 116) jjstateSet[jjnewStateCnt++] = 65;
                            break;
                        case 67:
                            if (curChar == 114) jjstateSet[jjnewStateCnt++] = 68;
                            break;
                        case 68:
                            if (curChar == 93 && kind > 37) kind = 37;
                            break;
                        case 69:
                            if (curChar == 101) jjstateSet[jjnewStateCnt++] = 67;
                            break;
                        case 70:
                            if (curChar == 115) jjstateSet[jjnewStateCnt++] = 69;
                            break;
                        case 71:
                            if (curChar == 117) jjstateSet[jjnewStateCnt++] = 70;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 4:
                            if ((jjbitVec0[i2] & l2) != 0L) jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 72:
                        case 19:
                            if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddStates(0, 3);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 72 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_1 () {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_1(0x80L);
            default:
                return 1;
        }
    }

    private final int jjMoveStringLiteralDfa1_1 ( long active0 ) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x80L) != 0L) return jjStopAtPos(1, 7);
                break;
            default:
                return 2;
        }
        return 2;
    }

    static final int[] jjnextStates = {19, 20, 27, 28, 53, 50, 54, 37, 38, 39, 44, 45, 4, 6, 17, 19, 20, 30, 27, 28, 7, 8, 10, 21, 29, 31, 49, 50, 51, 60, 66, 71, 42, 43, 46, 47,};
    public static final String[] jjstrLiteralImages = {"", null, null, null, null, null, null, null, null, "\56", "\50", "\51", "\133", "\135", "\42", "\47", "\174", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,};
    public static final String[] lexStateNames = {"DEFAULT", "WITHIN_COMMENT",};
    public static final int[] jjnewLexState = {-1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,};
    static final long[] jjtoToken = {0x380f93fe01L,};
    static final long[] jjtoSkip = {0xfeL,};
    static final long[] jjtoMore = {0x100L,};
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[72];
    private final int[] jjstateSet = new int[144];
    protected char curChar;

    public HtPrologParserTokenManager ( SimpleCharStream stream ) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public HtPrologParserTokenManager ( SimpleCharStream stream, int lexState ) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit ( SimpleCharStream stream ) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds () {
        int i;
        jjround = 0x80000001;
        for (i = 72; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    public void ReInit ( SimpleCharStream stream, int lexState ) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo ( int lexState ) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else curLexState = lexState;
    }

    protected HtToken jjFillToken () {
        HtToken t = HtToken.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public HtToken getNextToken () {
        int kind;
        HtToken specialToken = null;
        HtToken matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            for (; ; ) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 8) {
                            jjmatchedKind = 8;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }
}
